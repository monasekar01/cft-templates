AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  VPCcidr:
    Description: Please enter the IP range for this VpcId
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetcidr:
    Description: Please enter the IP range for this publicsubnet
    Type: String 
    Default: 10.0.1.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCcidr
      EnableDnsSupport: true
      EnableDnsHostnames: true  
      Tags:
        - Key: Name
          Value: testVPC 
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: testVPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetcidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: testVPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: testVPC
  PubliRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  EC2INstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0b0dcb5067f052a63
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: 
        - !GetAtt PublicSG.GroupId  # added new
      IamInstanceProfile: !Ref EC2InstanceProfile  
      Tags:
        - Key: Name
          Value: testVPC 
  PublicSG:    # whole section new
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  
      Tags:
        - Key: Name
          Value: testVPC 
  Ec2ands3fullaccesspolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'ec2 s3 full access'
      ManagedPolicyName: 'ec2ands3fullaccess'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:*'
              - 's3:*'
            Resource: '*'
      Roles:
        - !Ref EC2role  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2Profile
      Roles:
        - !Ref EC2role        
  EC2role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Description: Role to provide access to ec2        
      RoleName: ec2accessrole 
Outputs:
  VPCID:
    Description: Vpc id of webserver vpc
    Value: !Ref VPC
    Export:
      Name: "VPCID"
  PUBLICSUBNETID:
    Description: subnet id of webserver vpc
    Value: !Ref PublicSubnet
    Export:
      Name: "PUBLICSUBNETID" 
  PUBLICSG:
    Description: securitygroup id of webserver vpc
    Value: !Ref PublicSG
    Export:
      Name: "PUBLICSG"         

